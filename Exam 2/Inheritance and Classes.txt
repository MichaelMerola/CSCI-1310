#include <iostream>
#include <string>
using namespace std;
/*Classes can inherit features from other classes. With inheritance,
a set of features that need to be used in several classes can be included
in the class by establishing a base class. This is like the parent class.

Child classes, aka derived classes, inherit the features of the parent and
then also include features of their own. Anything defined in the child
class that has the same name as the feature in the parent class, takes
precedence over the same feature in the parent class.

As an example, think of shapes - squares, rectangles, and triangles. Each
of these shapes has features in common. They have a height and a width and
even a number of sides. However, if you want to calculate the area of a square
it's different than calculating the area of a triangle. The features common
to these shapes can be placed in a class called Polygon. Each of the specific
shapes are in their own class, and inherit from Polygon.

The rules of public, private, and protected can apply to how derived classes can
"see" members of the base class. The inheritance can set the access level.

public members of the Base class can be seen everywhere that Base can be seen.
protected members of the Base class can be seen by the children of Base.
private members of Base can only be seen by Base.

class Base {
    public:
        int publicMember;
    protected:
        int protectedMember;
    private:
        int privateMember;
};

If the inheritance is public, everything that is aware of Base and Child
is also aware that Child inherits from Base.

If the inheritance is protected, only Child, and its children, are
aware that they inherit from Base.

If the inheritance is private, no one other than Child is aware of the
inheritance.
*/
//base class Polygon
class Polygon{
protected:
    int height;
    int width;
public:
    Polygon(){
        cout<<"polygon constructor called"<<endl;
    }

    void setValues(int h, int w){
        height = h;
        width = w;
    }
};
class Rectangle:public Polygon{
public:
    Rectangle(){
        cout<<"calling rectangle constructor"<<endl;
    }

    int area(){
        return height * width;
    }

};
//class <derived class name> : <access level> <base class name>
class Triangle:public Polygon{
public:
    Triangle(){
        cout<<"calling triangle constructor"<<endl;
    }
    int area(){
        return (height*width)/2;
    }
};
//class Automobile is base class
//class Truck and class Car as derived class
class Automobile{
//make, model, year, condition
protected:
    string make;
    string model;
    int year;
    string condition;
public:
    Automobile(string ma, string mo, int y, string co){
        make = ma;
        model = mo;
        year = y;
        condition = co;
        cout<<"calling automobile constructor"<<endl;
    }
    string getCondition(){
        return condition;
    }
    void setCondition(string c){
        condition = c;
    }

};

class Truck:public Automobile{
private:
    string cab;
    string bed;
public:
    Truck(string ma, string mo, int y, string co, string c, string b):Automobile(ma, mo, y, co){
        cab = c;
        bed = b;
        cout<<"calling truck constructor"<<endl;
    }
    //put getCondition here
    string getTruckCondition(){
        return condition;
    }
};

//create a Car class with properties for doors and trunkType, inherits from Automobile
class Car:public Automobile{
private:
    int doors;
    string trunkType;
public:
    Car(string ma, string mo, int y, string co, int d, string trunk):Automobile(ma, mo, y, co){
        doors = d;
        trunkType = trunk;
    }
};


int main()
{
    Truck trk("Ford", "F150", 1980, "old","extended cab", "long bed");
    cout<<trk.getCondition()<<endl;
    trk.setCondition("restored");
    cout<<trk.getCondition()<<endl;
    cout<<trk.getTruckCondition()<<endl;

    Car car("Subaru","Outback",1995,"old",4,"hatchback");
    cout<<car.getCondition()<<endl;


    Rectangle rect;
    rect.setValues(5,4);
    Triangle tri;
    tri.setValues(5,4);
    cout<<"the area is "<<rect.area()<<endl;
    cout<<"the triangle area is "<<tri.area()<<endl;

    //Create a triangle class that inherits polygon and just has one method for calculating area
    //cout << "Hello world!" << endl;
    return 0;
}